package com.marshall.sportbot.controller;

import com.marshall.sportbot.entity.UserEntity;
import com.marshall.sportbot.enums.ExerciseType;
import com.marshall.sportbot.enums.UserState;
import com.marshall.sportbot.service.ExerciseService;
import com.marshall.sportbot.service.Helper;
import com.marshall.sportbot.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@RequiredArgsConstructor
@Component
@Slf4j
public class SportBotController extends TelegramLongPollingBot {
    private final UserService userService;
    private final ExerciseService exerciseService;
    private final Map<Long, UserState> userStateMap = new ConcurrentHashMap<>();

    @Value("${bot.name}")
    private String botUserName;
    @Value("${bot.token}")
    private String botToken;

    @Override
    public String getBotUsername() {
        return botUserName;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        log.info(String.valueOf(update));
        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText().trim();
            String chatId = update.getMessage().getChatId().toString();
            Long userId = update.getMessage().getFrom().getId();
            UserEntity userEntity = userService.getUser(update.getMessage().getFrom(), chatId);

            UserState state = userStateMap.get(userId);
            switch (text) {
                case "/start" -> {
                    sendStartKeyboard(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                    userStateMap.put(userId, UserState.IN_START_MENU);
                }
                case "/help", "‚ÑπÔ∏è –ü–æ–º–æ—â—å" -> sendMessage(chatId, getHelpText());
                case "–û—Ç–∂–∏–º–∞–Ω–∏—è" -> {
                    sendMessage(chatId, exerciseService.getExerciseProgressMessage(userEntity, ExerciseType.PUSH_UP));
                    sendPushUpsKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                    userStateMap.put(userId, UserState.IN_PUSH_UP_MENU);
                }
                case "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è" -> sendMessage(chatId, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
                case "–ù–∞–∑–∞–¥" -> {
                    if (UserState.IN_PUSH_UP_MENU.equals(state)) {
                        sendStartKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                        userStateMap.put(userId, UserState.IN_START_MENU);
                    }
                    if (UserState.IN_PUSH_UP_GOAL_MENU.equals(state)) {
                        sendPushUpsKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                        userStateMap.put(userId, UserState.IN_PUSH_UP_MENU);
                    }
                }
                case "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –æ—Ç–∂–∏–º–∞–Ω–∏–π" -> {
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π:");
                    userStateMap.put(userId, UserState.WAITING_PUSH_UP_COUNT);
                }
                case "–¶–µ–ª–∏ –æ—Ç–∂–∏–º–∞–Ω–∏–π" -> {
                    sendMessage(chatId, userService.getGoalsMessage(userEntity, ExerciseType.PUSH_UP));
                    sendGoalKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                    userStateMap.put(userId, UserState.IN_PUSH_UP_GOAL_MENU);
                }
                case "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å –æ—Ç–∂–∏–º–∞–Ω–∏–π" -> {
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å –æ—Ç–∂–∏–º–∞–Ω–∏–π");
                    userStateMap.put(userId, UserState.SET_PUSH_UPS_DAY_GOAL);
                }
                case "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é —Ü–µ–ª—å –æ—Ç–∂–∏–º–∞–Ω–∏–π" -> {
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–µ–¥–µ–ª—å–Ω—É—é —Ü–µ–ª—å –æ—Ç–∂–∏–º–∞–Ω–∏–π");
                    userStateMap.put(userId, UserState.SET_PUSH_UPS_WEEK_GOAL);
                }
                case "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—è—á–Ω—É—é —Ü–µ–ª—å –æ—Ç–∂–∏–º–∞–Ω–∏–π" -> {
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—á–Ω—É—é —Ü–µ–ª—å –æ—Ç–∂–∏–º–∞–Ω–∏–π");
                    userStateMap.put(userId, UserState.SET_PUSH_UPS_MONTH_GOAL);
                }
                case "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –æ—Ç–∂–∏–º–∞–Ω–∏—è–º" -> {
                    sendMessage(chatId, userService.switchNotification(userEntity, ExerciseType.PUSH_UP));
                }
                case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" -> sendMessage(chatId, "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...");

                default -> {
                    if (state != null) {
                        switch (state) {
                            case WAITING_PUSH_UP_COUNT -> {
                                try {
                                    int count = Helper.parseCount(text);
                                    sendMessage(chatId, exerciseService.addExercise(userEntity, ExerciseType.PUSH_UP, count));
                                    sendMessage(chatId, exerciseService.getExerciseProgressMessage(userEntity, ExerciseType.PUSH_UP));
                                    userStateMap.put(userId, UserState.IN_PUSH_UP_MENU);
                                } catch (NumberFormatException e) {
                                    sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                                }
                            }
                            case SET_PUSH_UPS_DAY_GOAL -> {
                                try {
                                    int count = Helper.parseCount(text);
                                    userService.setDayGoal(userEntity, ExerciseType.PUSH_UP, count);
                                    sendMessage(chatId, "–î–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å –æ—Ç–∂–∏–º–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
                                    sendMessage(chatId, userService.getGoalsMessage(userEntity, ExerciseType.PUSH_UP));
                                    sendGoalKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                                    userStateMap.put(userId, UserState.IN_PUSH_UP_GOAL_MENU);
                                } catch (NumberFormatException e) {
                                    sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                                }
                            }
                            case SET_PUSH_UPS_WEEK_GOAL -> {
                                try {
                                    int count = Helper.parseCount(text);
                                    userService.setWeekGoal(userEntity, ExerciseType.PUSH_UP, count);
                                    sendMessage(chatId, "–ù–µ–¥–µ–ª—å–Ω–∞—è —Ü–µ–ª—å –æ—Ç–∂–∏–º–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
                                    sendMessage(chatId, userService.getGoalsMessage(userEntity, ExerciseType.PUSH_UP));
                                    sendGoalKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                                    userStateMap.put(userId, UserState.IN_PUSH_UP_GOAL_MENU);
                                } catch (NumberFormatException e) {
                                    sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                                }
                            }
                            case SET_PUSH_UPS_MONTH_GOAL -> {
                                try {
                                    int count = Helper.parseCount(text);
                                    userService.setMonthGoal(userEntity, ExerciseType.PUSH_UP, count);
                                    sendMessage(chatId, "–ú–µ—Å—è—á–Ω–∞—è —Ü–µ–ª—å –æ—Ç–∂–∏–º–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
                                    sendMessage(chatId, userService.getGoalsMessage(userEntity, ExerciseType.PUSH_UP));
                                    sendGoalKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                                    userStateMap.put(userId, UserState.IN_PUSH_UP_GOAL_MENU);
                                } catch (NumberFormatException e) {
                                    sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                                }
                            }
                            default -> {
                                sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚ÑπÔ∏è –ü–æ–º–æ—â—å¬ª –∏ –∏–∑—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.");
                            }
                        }
                    } else {
                        sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚ÑπÔ∏è –ü–æ–º–æ—â—å¬ª –∏ –∏–∑—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.");
                    }
                }
            }
        }
    }

    private String getHelpText() {
        return "–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Å—Ç–∏ —É—á—ë—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:\n\n" +
                "‚Äî –û—Ç–∂–∏–º–∞–Ω–∏—è\n‚Äî –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è\n‚Äî üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n";
    }

    private void sendStartKeyboard(String chatId, String text) {
        SendMessage message = new SendMessage(chatId, text);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–û—Ç–∂–∏–º–∞–Ω–∏—è");
        row1.add("–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("‚ÑπÔ∏è –ü–æ–º–æ—â—å");
        row2.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");

        keyboardMarkup.setKeyboard(List.of(row1, row2));
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendPushUpsKeyboard(String chatId, String text) {
        SendMessage message = new SendMessage(chatId, text);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –æ—Ç–∂–∏–º–∞–Ω–∏–π");
        row1.add("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–∂–∏–º–∞–Ω–∏—è–º");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–¶–µ–ª–∏ –æ—Ç–∂–∏–º–∞–Ω–∏–π");
        row2.add("–ù–∞–∑–∞–¥");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –æ—Ç–∂–∏–º–∞–Ω–∏—è–º");
        row3.add("–ù–∞–∑–∞–¥");

        keyboardMarkup.setKeyboard(List.of(row1, row2, row3));
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendGoalKeyboard(String chatId, String text) {
        SendMessage message = new SendMessage(chatId, text);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å –æ—Ç–∂–∏–º–∞–Ω–∏–π");
        row1.add("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é —Ü–µ–ª—å –æ—Ç–∂–∏–º–∞–Ω–∏–π");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—è—á–Ω—É—é —Ü–µ–ª—å –æ—Ç–∂–∏–º–∞–Ω–∏–π");
        row2.add("–ù–∞–∑–∞–¥");

        keyboardMarkup.setKeyboard(List.of(row1, row2));
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void sendMessage(String chatId, String text) {
        SendMessage message = new SendMessage(chatId, text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}